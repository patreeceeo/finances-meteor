// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  describe("finances", function() {
    var a1, a2, a3, i, i1, i2, i3, _ref;
    _ref = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 6; i = ++_i) {
        _results.push(null);
      }
      return _results;
    })(), a1 = _ref[0], a2 = _ref[1], a3 = _ref[2], i1 = _ref[3], i2 = _ref[4], i3 = _ref[5];
    beforeEach(function() {
      finances.reset();
      a1 = new finances.Account('Fred');
      a2 = new finances.Account('Dafny');
      a3 = new finances.Account('Shaggy/Scooby');
      i1 = new finances.Item('dinner', 60);
      i2 = new finances.Item('costume', 25);
      return i3 = new finances.Item('snacks', 12);
    });
    it('should be groovy', function() {
      return expect(finances).toBeDefined();
    });
    it('should track users', function() {
      a1.uses(i1);
      a2.uses(i1);
      expect(__indexOf.call(finances.getUsers(i1), a1) >= 0).toBe(true);
      return expect(__indexOf.call(finances.getUsers(i1), a2) >= 0).toBe(true);
    });
    it('should track payments', function() {
      var accounts, p;
      a1.pays(i1, 50);
      a2.pays(i1, 50);
      accounts = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = finances.getPayments(i1);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          p = _ref1[_i];
          _results.push(p.fromAccount);
        }
        return _results;
      })();
      expect(__indexOf.call(accounts, a1) >= 0);
      return expect(__indexOf.call(accounts, a2) >= 0);
    });
    it('should know how much each account owes (w/o cycles)', function() {
      a1.paysAndUses(i1);
      a2.pays(i2);
      a3.paysAndUses(i3);
      a1.uses(i2);
      a2.uses(i1);
      a3.uses(i1);
      expect(a1.owes().total).toBe(25);
      expect(a2.owes().total).toBe(60 / 3);
      return expect(a3.owes().total).toBe(60 / 3);
    });
    return xit('should know how much each account owes (w/ cycles)', function() {
      a1.uses(i1);
      a2.pays(i1);
      a2.uses(i2);
      a3.pays(i2);
      a3.uses(i3);
      a1.pays(i3);
      return expect(a1.owes().total + a2.owes().total + a3.owes().total).toBe(0);
    });
  });

}).call(this);
