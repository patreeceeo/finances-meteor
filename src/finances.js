// Generated by CoffeeScript 1.6.3
(function() {
  var Account, Item, Payment;

  Item = (function() {
    function Item(name, amount) {
      this.name = name;
      this.amount = amount;
      finances.items[this.name] = this;
    }

    return Item;

  })();

  Account = (function() {
    function Account(name) {
      this.name = name;
      this.usesItems = [];
      this.sendsPayments = [];
      this.receivesPayments = [];
    }

    Account.prototype.pays = function(item, percent) {
      if (percent == null) {
        percent = 100;
      }
      return new Payment(item, {
        percent: percent,
        fromAccount: this
      });
    };

    Account.prototype.uses = function(item) {
      finances.getUsers(item).push(this);
      return this.usesItems.push(item);
    };

    Account.prototype.paysAndUses = function(item, percent) {
      if (percent == null) {
        percent = 100;
      }
      this.pays(item, percent);
      return this.uses(item);
    };

    Account.prototype.owes = function() {
      var item, payment, share, total, _i, _j, _len, _len1, _ref, _ref1;
      total = 0;
      _ref = this.usesItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        share = item.amount / finances.getUsers(item).length;
        _ref1 = finances.getPayments(item);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          payment = _ref1[_j];
          if (payment.fromAccount === this) {
            share = Math.max(0, share - payment.amount());
          }
        }
        total += share;
      }
      return {
        total: total
      };
    };

    return Account;

  })();

  Payment = (function() {
    function Payment(item, options) {
      var _ref, _ref1;
      this.item = item;
      this.options = options;
      finances.getPayments(this.item).push(this);
      this.percent = this.options.percent || 100;
      this.settled = this.options.settled || true;
      this.fromAccount = this.options.fromAccount;
      if ((_ref = this.fromAccount) != null) {
        _ref.sendsPayments.push(this);
      }
      this.toAccount = this.options.toAccount;
      if ((_ref1 = this.toAccount) != null) {
        _ref1.receivesPayments.push(this);
      }
    }

    Payment.prototype.amount = function() {
      return this.item.amount * (this.percent / 100);
    };

    return Payment;

  })();

  if (this.finances == null) {
    this.finances = {
      getPayments: function(item) {
        var _base, _name;
        return (_base = this.payments)[_name = item.name] != null ? (_base = this.payments)[_name = item.name] : _base[_name] = [];
      },
      getUsers: function(item) {
        var _base, _name;
        return (_base = this.users)[_name = item.name] != null ? (_base = this.users)[_name = item.name] : _base[_name] = [];
      },
      reset: function() {
        this.items = {};
        this.payments = {};
        return this.users = {};
      },
      simplifyPayments: function() {},
      Item: Item,
      Account: Account,
      Payment: Payment
    };
  }

  finances.reset();

}).call(this);
