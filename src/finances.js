// Generated by CoffeeScript 1.6.3
(function() {
  var Account, Item, Payment, _;

  if (typeof _ === "undefined" || _ === null) {
    _ = typeof Package !== "undefined" && Package !== null ? Package.underscore._ : void 0;
  }

  Item = (function() {
    function Item(name, amount) {
      this.name = name;
      this.amount = amount;
      finances.items[this.name] = this;
    }

    Item.prototype.clone = function(name) {
      if (name == null) {
        name = this.name;
      }
      return new Item(name, this.amount);
    };

    return Item;

  })();

  Account = (function() {
    function Account(name) {
      this.name = name;
      this.usesItems = [];
      this.sendsPayments = [];
      this.receivesPayments = [];
    }

    Account.prototype.pays = function(item, percent) {
      if (percent == null) {
        percent = 100;
      }
      return new Payment({
        item: item,
        percent: percent,
        fromAccount: this
      });
    };

    Account.prototype.uses = function(item) {
      finances.getUsers(item).push(this);
      return this.usesItems.push(item);
    };

    Account.prototype.paysAndUses = function(item, percent) {
      if (percent == null) {
        percent = 100;
      }
      this.pays(item, percent);
      return this.uses(item);
    };

    Account.prototype.owes = function() {
      var p, total, _i, _len, _ref;
      total = 0;
      _ref = this.sendsPayments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (!(!p.settled)) {
          continue;
        }
        console.debug("include in total " + (p.toString()));
        total += p.amount;
      }
      return {
        total: total
      };
    };

    return Account;

  })();

  Payment = (function() {
    function Payment(options) {
      var _ref, _ref1;
      this.options = options;
      finances.payments.push(this);
      this.item = this.options.item;
      this.percent = this.options.percent || 100;
      if (this.item != null) {
        finances.getPaymentsForItem(this.item).push(this);
      }
      this.amount = this.item != null ? this.item.amount * (this.percent ? 100 / this.percent : 1 / this.getUsers(this.item).length) : this.options.amount || 0;
      this.settled = this.options.settled != null ? this.options.settled : true;
      this.fromAccount = this.options.fromAccount;
      if ((_ref = this.fromAccount) != null) {
        _ref.sendsPayments.push(this);
      }
      this.toAccount = this.options.toAccount;
      if ((_ref1 = this.toAccount) != null) {
        _ref1.receivesPayments.push(this);
      }
      console.debug("create " + (this.toString()));
    }

    Payment.prototype.isInternal = function() {
      return (this.fromAccount != null) && (this.toAccount != null);
    };

    Payment.prototype.toString = function() {
      var _ref, _ref1;
      return "" + (this.settled ? '' : 'unsettled ') + "payment from " + this.fromAccount.name + " to " + ((_ref = this.toAccount) != null ? _ref.name : void 0) + " for " + ((_ref1 = this.item) != null ? _ref1.name : void 0) + " ($" + this.amount + ")";
    };

    return Payment;

  })();

  if (this.finances == null) {
    this.finances = {
      getPaymentsForItem: function(item) {
        var _base, _name;
        return (_base = this.paymentsForItem)[_name = item.name] != null ? (_base = this.paymentsForItem)[_name = item.name] : _base[_name] = [];
      },
      getUsers: function(item) {
        var _base, _name;
        return (_base = this.users)[_name = item.name] != null ? (_base = this.users)[_name = item.name] : _base[_name] = [];
      },
      reset: function() {
        this.items = {};
        this.paymentsForItem = {};
        this.users = {};
        return this.payments = [];
      },
      deletePayment: function(p) {
        var deleteFromArray;
        console.debug("delete " + (p.toString()));
        deleteFromArray = function(parent, prop, value) {
          return parent[prop] = _(parent[prop]).without(value);
        };
        deleteFromArray(p.fromAccount, 'sendsPayments', p);
        deleteFromArray(p.toAccount, 'receivesPayments', p);
        if (p.item != null) {
          delete this.paymentsForItem[p.item.name];
        }
        return p.settled = true;
      },
      createOrIncreasePayment: function(options) {
        var payments;
        payments = _(this.payments).filter(function(p) {
          return p.fromAccount === options.fromAccount && p.toAccount === options.toAccount;
        });
        if (payments[0]) {
          console.debug("increase " + (payments[0].toString()) + " by $" + options.amount);
          payments[0].amount += options.amount;
          return payments[0];
        } else {
          return new Payment(options);
        }
      },
      createInternalPayments: function() {
        var item, p, user, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        _ref = _.values(this.items);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _ref1 = this.getPaymentsForItem(item);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            if (p.settled) {
              _ref2 = this.getUsers(item);
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                user = _ref2[_k];
                if (user !== p.fromAccount) {
                  this.createOrIncreasePayment({
                    amount: item.amount / this.getUsers(item).length,
                    toAccount: p.fromAccount,
                    fromAccount: user,
                    settled: false
                  });
                }
              }
            }
          }
        }
        return void 0;
      },
      simplifyPayments: function() {
        var minflow, newp, p, p2, payments, _i, _j, _len, _len1;
        payments = _(this.payments).sortBy('amount').filter(function(p) {
          return !p.settled && p.isInternal();
        });
        for (_i = 0, _len = payments.length; _i < _len; _i++) {
          p = payments[_i];
          for (_j = 0, _len1 = payments.length; _j < _len1; _j++) {
            p2 = payments[_j];
            if (!(p.toAccount === p2.fromAccount && !(p.settled || p2.settled))) {
              continue;
            }
            console.debug("" + p.fromAccount.name + " owes $" + p.amount + " to " + p.toAccount.name + " and " + p2.fromAccount.name + " owes $" + p2.amount + " to " + p2.toAccount.name);
            if (p.amount === p2.amount) {
              if (p.fromAccount !== p2.toAccount) {
                console.debug("redirect " + (p.toString()) + " to " + p2.toAccount.name);
                p.toAccount = p2.toAccount;
              } else {
                this.deletePayment(p);
              }
              this.deletePayment(p2);
            } else {
              minflow = Math.min(p.amount, p2.amount);
              if (p.fromAccount !== p2.toAccount) {
                payments.push(newp = this.createOrIncreasePayment({
                  fromAccount: p.fromAccount,
                  toAccount: p2.toAccount,
                  amount: minflow,
                  settled: false
                }));
              }
              if (p.amount > p2.amount) {
                console.debug("decrease " + (p.toString()) + " by $" + minflow);
                if (p.amount > minflow) {
                  p.amount -= minflow;
                } else {
                  this.deletePayment(p);
                }
                this.deletePayment(p2);
              } else {
                console.debug("decrease " + (p2.toString()) + " by $" + minflow);
                if (p2.amount > minflow) {
                  p2.amount -= minflow;
                } else {
                  this.deletePayment(p2);
                }
                this.deletePayment(p);
              }
            }
          }
        }
        return void 0;
      },
      Item: Item,
      Account: Account,
      Payment: Payment
    };
  }

  finances.reset();

}).call(this);
